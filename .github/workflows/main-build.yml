name: Node.js-APP

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 14

    - name: Install Dependencies
      run: npm install

    - name: Run Tests
      run: npm test

  sonarqube:
    name: SonarQube Trigger
    runs-on: ubuntu-latest
    steps:
    - name: Checking out
      uses: actions/checkout@master
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.2.0
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_TOKEN }}
        projectKey: "Github-Action-Scan"

  trivy-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Install Trivy
      run: |
        wget https://github.com/aquasecurity/trivy/releases/download/v0.20.0/trivy_0.20.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.20.0_Linux-64bit.deb

    - name: Trivy Scan
      run: trivy --exit-code 0 --severity HIGH,CRITICAL .

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [sonarqube, trivy-scan]
    steps:
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image to ECR
      run: |
        docker build -t your-ecr-repository:latest .
        docker tag your-ecr-repository:latest ${{ steps.login-ecr.outputs.registry }}:latest
        docker push ${{ steps.login-ecr.outputs.registry }}:latest

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "your-aws-region"

    - name: Deploy to EKS
      run: kubectl apply -f deployment.yaml
